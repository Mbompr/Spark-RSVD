plugins {
    id "java"
    id "scala"
    id "maven-publish"
    id "signing"
    id "com.github.maiflai.scalatest" version "0.25"
    id 'io.codearte.nexus-staging'  version '0.20.0'
    id 'de.marcphilipp.nexus-publish' version '0.2.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group 'com.criteo'
version '1.1-spark3'

sourceCompatibility = 1.8



ext {
    sparkVersion = '3.1.1'
    if (!project.hasProperty("nexusUsername")) {
        nexusUsername = "defaultNexusUserName"
    }
    if (!project.hasProperty("nexusPassword")) {
        nexusPassword = "defaultNexusUserPassword"
    }
}

repositories {
    mavenCentral()
}


dependencies {

    //scala version
    compile 'org.scala-lang:scala-library:2.12.10'

    //spark version
    compile "org.apache.spark:spark-core_2.12:$sparkVersion"
    compile "org.apache.spark:spark-mllib_2.12:$sparkVersion"

    compile group: 'org.scalanlp', name: 'breeze_2.12', version: '0.13.2'

    compile group: 'com.typesafe.scala-logging', name: 'scala-logging_2.12', version: '3.9.4'

    //https://mvnrepository.com/artifact/com.github.scopt/scopt
    compile 'com.github.scopt:scopt_2.12:3.7.1'

    compile group: 'de.javakaffee', name: 'kryo-serializers', version: '0.42'

    // https://mvnrepository.com/artifact/org.scalatest/scalatest
    testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: '3.0.5'
    testRuntime 'org.pegdown:pegdown:1.4.2'
}

signing {
    def secretKey = System.getenv("MAVEN_SECRING_GPG_BASE64")
    def password = System.getenv("SONATYPE_PASSWORD")

    if (secretKey != null && password != null) {
        useInMemoryPgpKeys(secretKey, password)
        sign(publishing.publications.withType(MavenPublication))
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocTwoJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

shadowJar {
    zip64 = true
    archiveClassifier.set('uber')
}

publishing {
    publications {
        rsvd(MavenPublication) {
            from components.java

            pom {
                description = 'R-SVD for large sparse matrices on Spark'
                name = 'Spark-RSVD'
                url = 'https://github.com/criteo/Spark-RSVD'
                organization {
                    name = 'Criteo'
                    url = 'https://www.criteo.com'
                }
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "alois-bissuel"
                        name = "Alo√Øs Bissuel"
                        email = "a.bissuel@criteo.com"
                        organization = "Criteo"
                    }
                    developer {
                        id = "vincent-grosbois"
                        name = "Vincent Grosbois"
                        email = "v.grosbois@criteo.com"
                        organization = "Criteo"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/criteo/Spark-RSVD.git"
                    developerConnection = "scm:git:git://github.com/criteo/Spark-RSVD.git"
                    url = "https://github.com/criteo/Spark-RSVD"
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocTwoJar) {
                classifier = 'javadoc'
            }
            artifact(shadowJar) {
                classifier = 'shadowJar'
            }
        }
    }
    
    repositories {
        maven {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }
    }
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocTwoJar
    archives shadowJar
}

nexusStaging {
    serverUrl = "https://oss.sonatype.org/service/local/"
    packageGroup = 'com.criteo'
    username = "criteo-oss"
    password = System.getenv("SONATYPE_PASSWORD")
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 3000
}
